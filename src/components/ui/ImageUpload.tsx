import React, { useState, useCallback, useRef } from "react"; import { Button } from "@/components/ui/button"; import { Slider } from "@/components/ui/slider"; import { ImageComparison } from "@/components/ui/image-comparison"; import { cn } from "@/utils"; interface ImageUploadProps { onImageSelect: (file: File) => void; onEnhancementChange: (params: EnhancementParams) => void; isProcessing: boolean; originalUrl?: string; processedUrl?: string; className?: string; } interface EnhancementParams { scale: number; enhancementLevel: number; detailStrength: number; style: "artistic" | "realistic" | "balanced"; } export function ImageUpload({ onImageSelect, onEnhancementChange, isProcessing, originalUrl, processedUrl, className, }: ImageUploadProps) { const [isDragging, setIsDragging] = useState(false); const [params, setParams] = useState<EnhancementParams>({ scale: 2, enhancementLevel: 2, detailStrength: 1, style: "realistic", }); const fileInputRef = useRef<HTMLInputElement>(null); const handleDragEnter = useCallback((e: React.DragEvent) => { e.preventDefault(); e.stopPropagation(); setIsDragging(true); }, []); const handleDragLeave = useCallback((e: React.DragEvent) => { e.preventDefault(); e.stopPropagation(); setIsDragging(false); }, []); const handleDragOver = useCallback((e: React.DragEvent) => { e.preventDefault(); e.stopPropagation(); }, []); const handleDrop = useCallback((e: React.DragEvent) => { e.preventDefault(); e.stopPropagation(); setIsDragging(false); const files = Array.from(e.dataTransfer.files); if (files.length > 0 && files[0].type.startsWith("image/")) { onImageSelect(files[0]); } }, [onImageSelect]); const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => { const files = Array.from(e.target.files || []); if (files.length > 0) { onImageSelect(files[0]); } }, [onImageSelect]); const handleParamChange = useCallback((key: keyof EnhancementParams, value: number | string) => { setParams(prev => { const newParams = { ...prev, [key]: value }; onEnhancementChange(newParams); return newParams; }); }, [onEnhancementChange]); return ( <div className={cn("w-full space-y-4", className)}> <div className={cn( "relative flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg", "transition-colors duration-300 cursor-pointer", isDragging ? "border-purple-500 bg-purple-500/10" : "border-gray-600 hover:border-purple-500/50", originalUrl && "h-auto aspect-video" )} onDragEnter={handleDragEnter} onDragLeave={handleDragLeave} onDragOver={handleDragOver} onDrop={handleDrop} onClick={() => fileInputRef.current?.click()} > {originalUrl ? ( <ImageComparison originalUrl={originalUrl} processedUrl={processedUrl || originalUrl} isProcessing={isProcessing} className="w-full h-full" /> ) : ( <div className="text-center p-6"> <p className="text-lg font-medium">Drag and drop your image here</p> <p className="text-sm text-gray-400">or click to select a file</p> </div> )} <input ref={fileInputRef} type="file" className="hidden" accept="image/*" onChange={handleFileSelect} /> </div> <div className="grid gap-4"> <div className="space-y-2"> <label className="text-sm font-medium">Scale</label> <Slider value={[params.scale]} onValueChange={([value]) => handleParamChange("scale", value)} min={1} max={4} step={1} disabled={isProcessing} /> </div> <div className="space-y-2"> <label className="text-sm font-medium">Enhancement Level</label> <Slider value={[params.enhancementLevel]} onValueChange={([value]) => handleParamChange("enhancementLevel", value)} min={1} max={3} step={1} disabled={isProcessing} /> </div> <div className="space-y-2"> <label className="text-sm font-medium">Detail Strength</label> <Slider value={[params.detailStrength]} onValueChange={([value]) => handleParamChange("detailStrength", value)} min={0} max={1} step={0.1} disabled={isProcessing} /> </div> <div className="space-y-2"> <label className="text-sm font-medium">Style</label> <div className="grid grid-cols-3 gap-2"> {(["artistic", "realistic", "balanced"] as const).map((style) => ( <Button key={style} variant={params.style === style ? "default" : "outline"} onClick={() => handleParamChange("style", style)} disabled={isProcessing} className="capitalize" > {style} </Button> ))} </div> </div> </div> </div> ); }
